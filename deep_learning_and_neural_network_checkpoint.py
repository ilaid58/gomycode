# -*- coding: utf-8 -*-
"""Deep_Learning_and_Neural_Network_CheckPoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15pYGhppXKJne5xyQou6FMM4ZAQ6n_Y4O

#**1. Import necessary library : *nltk*, *streamlit*, *speech_recognition***

## Download package
"""
import os

#os.system('pip install streamlit')

os.system('pip install SpeechRecognition')
os.system('pip install nltk')

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
import streamlit as st
import speech_recognition as sr
import string

"""#**2. Load text file and preprocess the data using chatBot**"""

st.markdown('upload the text file')
upload = st.file_uploader('upload')
if upload is not None:
  data = upload.getvalue()
  data = str(data)

def preprocess(sentence):
  words = nltk.tokenize.word_tokenize(sentence)
  words = [word.lower() for word in words if word.lower() not in nltk.corpus.stopWords.words('english') and word.lower() not in string.ponctuation]
  lemmatizer = nltk.stem.WordNetLemmatizer()
  words = [lemmatizer.lemmatize(word) for word in words]
  return words

if upload is not None:
  sentences = nltk.tokenize.sent_tokenize(data)
  corpus = [preprocess(sentence) for sentence in sentences]

def get_most_relev_sentence(query):
  query = preprocess(query)
  max_similarity = 0
  most_relev_sentence = ''
  for sentence in corpus:
    similarity = len(set(query).intersection(sentence)) / float(len(set(query).union(sentence)))
    if similarity > max_similarity:
      max_similarity = similarity
      most_relev_sentence = ' '.join(sentence)
  return most_relev_sentence

"""#**3. Function to describe speech into text**"""

def speech_into_text():
  r = sr.Recognizer()
  with sr.Microphone() as source:
    st.info('speak')
    audio = r.listen(source)
    if st.button('transcribe'):
      st.info('transcribing')
    try:
      text = r.recognize_google(audio)
      return text
    except:
      return 'there are some mistakes'

"""#**4. Modify the chatBot**"""

def chatBot(question):
  if question != 'there are some mistakes':
    response = get_most_relev_sentence(question)
  else:
    response = 'there are some mistakes'
  return response

"""#**5. Create a streamlit app**"""

question = st.chat_input('enter your question')
if st.button('ask'):
  question = question.title()
  answer = chatBot(question)

if st.button('record'):
  question = speech_into_text()
  answer = chatBot(question)
